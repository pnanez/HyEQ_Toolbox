%% Hybrid Arcs and Solutions
% In this tutorial, we show how to create and solve a hybrid system 
% using the |HybridSystem| class. For a brief introduction to hybrid systems, 
% see 
% <matlab:hybrid.internal.openHelp('intro_to_hybrid_systems') here>.
 
bb_system = hybrid.examples.BouncingBall();

x0 = [10, 0];
tspan = [0, 20];
jspan = [0, 30];
config = HybridSolverConfig('refine', 32); % Improves plot smoothness for demo.
sol = bb_system.solve(x0, tspan, jspan, config);
plotFlows(sol); % Display solution

%% Information About Solutions
% 
% The return value of the |solve| method is a |HybridSolution| object that contains 
% information about the solution.
sol

%% 
% A description of each |HybridSolution| property is as follows:
%
% * |t|: The continuous time values of the solution's hybrid time domain.
% * |j|: The discrete time values of the solution's hybrid time domain.
% * |x|: The state vector of the solution.
% * |x0|: The initial state of the solution.
% * |xf|: The final state of the solution.
% * |flow_lengths|: the durations of each interval of flow.
% * |jump_times|: the continuous times when each jump occured.
% * |shortest_flow_length|: the length of the shortest interval of flow.
% * |total_flow_length|: the length of the entire solution in continuous time.
% * |jump_count|: the number of discrete jumps.
% * |termination_cause|: the reason that the solution terminated. 
%
% The possible values for |termination_cause| are 
% 
% * |STATE_IS_INFINITE|
% * |STATE_IS_NAN|
% * |STATE_NOT_IN_C_UNION_D|  
% * |T_REACHED_END_OF_TSPAN| 
% * |J_REACHED_END_OF_JSPAN|
% * |CANCELED|

%% Modifying Hybrid Arcs
% Often, after calculating a solution to a hybrid system, we wish to manipulate 
% the resulting data, such as evaluating a function along the solution, removing 
% some of the components, or truncating the hybrid domain. Several functions 
% to this end are included in the |HybridArc| class (|HybridSolution| is a subclass 
% of |HybridArc|, so the solutions generated by |HybridSystem.solve| are |HybridArc| 
% objects). 
% In particular, the functions are |select|, |transform|, |restrictT| and
% |restrictJ|. 
% See |<matlab:doc('HybridArc') doc('HybridArc')>| for details.

hybrid_arc = sol.select(1);                   % Pick the 1st component.
hybrid_arc = hybrid_arc.transform(@(x) -x);   % Negate the value.
hybrid_arc = hybrid_arc.restrictT([1.5, 12]); % Truncate to t-values between 4.5 and 7.
hybrid_arc = hybrid_arc.restrictJ([2, inf]);  % Truncate to j-values >= 2.

% Plot hybrid arcs
clf
hpb = HybridPlotBuilder();
hpb.color('black').legend('Original').plotFlows(sol.select(1));
hold on
hpb.color('red').legend('Modified').plotFlows(hybrid_arc)

%% 
% *Example:* Suppose we want to compute the total energy
% of the bouncing ball: 
%
% $$E(x) = \gamma x_1 + \frac{1}{2} x_2^2.$$
%
% We can map the |HybridArc| object |sol| to a new |HybridArc| with the
% |transform| function. (Note that the state dimension before ($n=2$) and after ($n=1$)
% are not the same.)
% 
clf
energy_fnc = @(x) bb_system.gamma*x(1) + 0.5*x(2)^2;
plotFlows(sol.transform(energy_fnc))
title('Total Energy of Bouncing Ball')
ylabel('Energy')

%% Interpolation
% There are two functions for interpolating th hybrid arcs to different time
% grids. 
% The function |interpolateToArray| creates (as the name suggests) an
% array of values |x_interp| of $x$ at the $t$ locations given as an array |t_grid|.
% In cases where an interpolation point in |t_grid| aligns with one of the jump
% times, the resulting array can be configured

t_grid = linspace(0.5, 5.5, 10);
x_interp = sol.interpolateToArray(t_grid);

clf
hpb = HybridPlotBuilder().color('black')...
    .legend('Hybrid Arc')...
    .plotFlows(sol.restrictT([0, 6]).select(1));
hold on
interp_plt = plot(t_grid(:), x_interp(:, 1), 'red*-');

grid_plt = plot(t_grid, 0*t_grid, 'r|');
hpb.addLegendEntry(interp_plt, 'Interpolated Array');
hpb.addLegendEntry(grid_plt, 'Interpolation grid');

%% Creating |HybridArc|s from arrays
% You can also construct a |HybridArc| directly from the values of |t|, |j|, and
% |x| as follows:
t = linspace(0, 10, 100)'; % Must be a column vector
j = zeros(100, 1); 
x = t.^2;
hybrid_arc = HybridArc(t, j, x)
